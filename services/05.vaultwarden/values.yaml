image:
  repository: vaultwarden/server
  pullPolicy: IfNotPresent
  tag: 1.24.0

env:
# -- Config dir
  DATA_FOLDER: "data"

ingress:
  main:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    hosts:
      - host: vault.champiat.lan
        paths:
          - path: /
            pathType: Prefix
            service:
              port: 80
          - path: /notifications/hub/negotiate
            pathType: Prefix
            service:
              port: 80
          - path: /notifications/hub
            pathType: Prefix
            service:
              port: 3012
    

    tls:
    - secretName: vaultwarden-tls
      hosts:
        - vault.champiat.lan

persistence:
  config:
    enabled: true
    mountPath: "/data"
    size: 5Gi
    storageClass: freenas-nfs-csi


mariadb:
  enabled: true

  nameOverride: mariadb-vaultwarden
  architecture: standalone
  podSecurityContext:
    enabled: true
    fsGroup: 1000
  ## MariaDB primary container security context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param primary.containerSecurityContext.enabled MariaDB primary container securityContext
  ## @param primary.containerSecurityContext.runAsUser User ID for the MariaDB primary container
  ## @param primary.containerSecurityContext.runAsNonRoot Set Controller container's Security Context runAsNonRoot
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 1000
    runAsNonRoot: true

  auth:
    database: vaultwarden
    username: vaultwarden
    replicationUser: replicator
    existingSecret: mariadb-vaultwarden-auth
    forcePassword: true


  primary:
    nodeSelector:
      kubernetes.io/arch: amd64

    persistence:
      enabled: true
      storageClass: freenas-nfs-csi
      accessModes:
        - ReadWriteOnce
      size: 20Gi
    
    readinessProbe:
      initialDelaySeconds: 120

    livenessProbe:
      initialDelaySeconds: 120

  metrics:
    ## @param metrics.enabled Start a side-car prometheus exporter
    ##
    enabled: true
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30

    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
      ##
      enabled: true
      namespace: services
      labels:
        release: kube-prometheus-stack

    prometheusRule:
      ## @param metrics.prometheusRule.enabled if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
      ##
      enabled: true
      ## @param metrics.prometheusRule.namespace Namespace for the PrometheusRule Resource (defaults to the Release Namespace)
      ##
      namespace: services
      ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
      ##
      additionalLabels:
        release: kube-prometheus-stack

      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      ##
      rules:
      - alert: Vaultwarden-DB-Down
        expr: absent(up{job="vaultwarden-mariadb-vaultwarden"} == 1)
        for: 5m
        labels:
          severity: warning
          service: vaultwardendb
        annotations:
          message: "It seems that the vaultwarden's database instance is down"
          summary: "It seems that the vaultwarden's database instance is down"

 