#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
#

image:
  # -- image repository
  repository: ghcr.io/0xerr0r/blocky
  # -- image tag
  tag: v0.17
  # -- image pull policy
  pullPolicy: IfNotPresent

controller:
  # -- Set the controller upgrade strategy
  strategy: RollingUpdate
  # -- (int) Number of pods to load balance between
  replicas: 1


# podAnnotations:
#     fluentbit.io/parser: blocky

# -- environment variables. See [image docs](https://0xerr0r.github.io/blocky/installation/#run-with-docker) for more details.
# @default -- See below
env:
  # -- Set the container timezone
  TZ: Europe/Paris

ingress:
  main:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    hosts:
      -  # -- Host address. Helm template can be passed.
        host: dns.champiat.lan
        ## Configure the paths for the host
        paths:
          -  # -- Path.  Helm template can be passed.
            path: /
            # -- Ignored if not kubeVersion >= 1.14-0
            pathType: Prefix
            service:
              name: blocky
              port: 4000

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
    - secretName: blocky-tls
      hosts:
      - dns.champiat.lan

      
# -- Configures service settings for the chart.
# @default -- See values.yaml
service:
  main:
    ports:
      http:
        port: 4000
      # https:
      #   enabled: true
      #   port: 443
      #   protocol: HTTPS
  dot:
    enabled: true
    type: ClusterIP
    externalTrafficPolicy: Local
    ports:
      dot:
        enabled: true
        port: 853
        protocol: TCP
        targetPort: 853
  dns-udp:
    enabled: true
    type: ClusterIP
    externalTrafficPolicy: Local
    ports:
      dns-udp:
        enabled: true
        port: 53
        protocol: UDP
        targetPort: 53

# -- Configure persistence settings for the chart under this key.
# @default -- See values.yaml
persistence:
  logs:
    enabled: false
    mountPath: /logs
    storageClass: freenas-nfs-csi
    accessMode: ReadWriteOnce
    size: 5Gi

  tls:
    enabled: true
    existingClaim: blocky-tls
    type: secret
    mountPath: /app/tls
    name: blocky-tls


metrics:
  # -- Enable and configure a Prometheus serviceMonitor for the chart under this key.
  # @default -- See values.yaml
  enabled: true
  serviceMonitor:
    # -- Interval at which Prometheus should scrape metrics
    interval: 30s
    # -- Timeout after which the scrape is ended
    scrapeTimeout: 10s
    # -- Additional labels for the Kubernetes `ServiceMonitor` object
    labels:
      release: kube-prometheus-stack
    # -- The Kubernetes `Endpoints` label to use as the Prometheus job name
    jobLabel: ""
    # -- TargetLabels transfers labels from the Kubernetes `Service`` onto the created metrics.
    targetLabels: []
    # -- PodTargetLabels transfers labels on the Kubernetes `Pod`` onto the created metrics.
    podTargetLabels: []
  # -- Enable and configure Prometheus Rules for the chart under this key.
  # @default -- See values.yaml
  prometheusRule:
    enabled: true
    labels:
      release: kube-prometheus-stack
    rules:
      - alert: BlockyDisabled
        annotations:
          description: Blocky's ad blocking has been disabled for 15min.
            Please re-enable protection.
          summary: Blocky is disabled.
        expr: |
          blocky_blocking_enabled == 0
        for: 15m
        labels:
          severity: critical



config: |
  upstream:
   # these external DNS resolvers will be used. Blocky picks 2 random resolvers from the list for each query
   # format for resolver: [net:]host:[port][/path]. net could be empty (default, shortcut for tcp+udp), tcp+udp, tcp, udp, tcp-tls or https (DoH). If port is empty, default port will be used # # (53 for udp and tcp, 853 for tcp-tls, 443 for https (Doh))
   # this configuration is mandatory, please define at least one external DNS resolver
    default:
      - tcp-tls:dns.quad9.net:853
      - https://dns.quad9.net/dns-query
      - tcp-tls:1.1.1.1:853
      - https://cloudflare-dns.com/dns-query
  # optional: timeout to query the upstream resolver. Default: 2s
  upstreamTimeout: 5s

  # optional: custom IP address(es) for domain name (with all sub-domains). Multiple addresses must be separated by a comma
  # example: query "printer.lan" or "my.printer.lan" will return 192.168.178.3
  customDNS:
    mapping:
      sentio.lan: 10.3.98.10

  # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
  blocking:
    # definition of blacklist groups. Can be external link (http/https) or local file
    blackLists:
      malware:
        - https://cinsscore.com/list/ci-badguys.txt
        - https://openphish.com/feed.txt
        - https://mirai.security.gives/data/ip_list.txt
        - https://raw.githubusercontent.com/stamparm/ipsum/master/levels/8.txt
      ads:
        - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
        - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
        - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
        - https://perflyst.github.io/PiHoleBlocklist/android-tracking.txt
      special:
        - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts
        - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts
      google:
        - https://raw.githubusercontent.com/nickspaargaren/no-google/master/pihole-google.txt
    # definition: which groups should be applied for which client
    clientGroupsBlock:
      # default will be used, if no special definition for a client name exists
      default:
        - malware
        - ads
        - special
    # which response will be sent, if query is blocked:
    # zeroIp: 0.0.0.0 will be returned (default)
    # nxDomain: return NXDOMAIN as return code
    # comma separated list of destination IP addresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with # running web server on this address to display the "blocked" page.
    blockType: zeroIp
    # optional: TTL for answers to blocked domains
    # default: 6h
    blockTTL: 6h
    # optional: automatically list refresh period (in duration format). Default: 4h.
    # Negative value -> deactivate automatically refresh.
    # 0 value -> use default
    refreshPeriod: 4h
    # optional: timeout for list download (each url). Default: 60s. Use large values for big lists or slow internet connections
    downloadTimeout: 4m
    # optional: Download attempt timeout. Default: 60s
    downloadAttempts: 5
    # optional: Time between the download attempts. Default: 1s
    downloadCooldown: 10s
    # optional: if true, application startup will fail if at least one list can't be downloaded / opened. Default: false
    failStartOnListError: false

  # optional: configuration for caching of DNS responses
  caching:
    # duration how long a response must be cached (min value).
    # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
    # Default: 0
    minTime: 5m
    # duration how long a response must be cached (max value).
    # If <0, do not cache responses
    # If 0, use TTL
    # If > 0, use this value, if TTL is greater
    # Default: 0
    maxTime: 0
    # Max number of cache entries (responses) to be kept in cache (soft limit). Useful on systems with limited amount of RAM.
    # Default (0): unlimited
    maxItemsCount: 100
    # if true, will preload DNS results for often used queries (default: names queried more than 5 times in a 2-hour time window)
    # this improves the response time for often used queries, but significantly increases external traffic
    # default: false
    prefetching: true
    # prefetch track time window (in duration format)
    # default: 120
    prefetchExpires: 2h
    # name queries threshold for prefetch
    # default: 5
    prefetchThreshold: 5
    # Max number of domains to be kept in cache for prefetching (soft limit). Useful on systems with limited amount of RAM.
    # Default (0): unlimited
    prefetchMaxItemsCount: 0

  # optional: configuration of client name resolution
  clientLookup:
    # optional: this DNS resolver will be used to perform reverse DNS lookup (typically local router)
    upstream: udp:10.3.98.1
    # optional: some routers return multiple names for client (host name and user defined name). Define which single name should be used.
    # Example: take second name if present, if not take first name
    singleNameOrder:
      - 2
      - 1
  # optional: configuration for prometheus metrics endpoint
  prometheus:
    # enabled if true
    enable: true
    # url path, optional (default '/metrics')
    path: /metrics

  # optional: write query information (question, answer, client, duration etc.) to daily csv file
  queryLog:
    # optional one of: mysql, csv, csv-client. If empty, log to console
    type: mysql
    target: blocky:lWBA3e3w8JpRtAs4L00dILWlKGciXK4@tcp(mariadb-blocky.system.svc.cluster.local:3306)/blocky?charset=utf8mb4&parseTime=True&loc=Local
    # directory (should be mounted as volume in docker) for csv, db connection string for mysql
    # if > 0, deletes log files which are older than ... days
    logRetentionDays: 7
    # target: logs

  # optional: DNS listener port and bind ip address, default 53 (UDP and TCP). Example: 53, :53, 127.0.0.1:53
  port: 53
  # optional: Port for DoT (DNS-over-TLS) listener. Example: 853, 127.0.0.1:853
  tlsPort: 853
  # optional: HTTPS listener port and bind ip address, default empty = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH... Example: 443, :443, 127.0.0.1:443
  httpPort: 4000
  httpsPort: 443
  # mandatory, if https port > 0: path to cert and key file for SSL encryption
  certFile: /app/tls/tls.crt
  keyFile: /app/tls/tls.key
  # optional: use this DNS server to resolve blacklist urls and upstream DNS servers. Useful if no DNS resolver is configured and blocky needs to resolve a host name. Format net:IP:port, net must be udp or tcp
  bootstrapDns: tcp:1.1.1.1
  # optional: Drop all AAAA query if set to true. Default: false
  disableIPv6: false
  # optional: Log level (one from debug, info, warn, error). Default: info
  logLevel: info
  # optional: Log format (text or json). Default: text
  logFormat: json
  # optional: log timestamps. Default: true
  logTimestamp: true
  # optional: obfuscate log output (replace all alphanumeric characters with *) for user sensitive data like request domains or responses to increase privacy. Default: false
  logPrivacy: false




